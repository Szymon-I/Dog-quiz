{"version":3,"sources":["Globals.jsx","Starter.jsx","FunComponents.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["difficulty","breeds","difficultyNumber","easy","mid","hard","answerNoptions","StartingDifficulty","props","className","onClick","setter","StartingQuestionN","StartingSettings","setDifficulty","setting","setState","setQuestionN","PushSettings","state","questionNumber","this","React","Component","GameInfo","class","questionN","answered","all","TopPadding","message","MenuEntry","key","color","changeHandler","ColumnWrapper","columnClasses","content","Finished","score","resetGame","ButtonsMenu","M","Dropdown","init","$","container","autoTrigger","listItems","dogs","i","handler","length","id","href","data-target","ImageApp","fetch_photo","fetch","then","res","json","result","url","String","status","error","substr","generatedBreeds","generateBreeds","correct_id","getCorrectId","getNameFromUrl","isLoaded","shuffle","arr","j","Math","floor","random","temp","splitted","split","breedName","diff","breedCopy","splice","indexOf","push","correct","answerWrapper","choosen_id","handleAnswer","prev_diff","src","alt","size","DifficultyMenu","FloatingActionButton","App","settingsApplied","playerAnswers","incorrect","starterSettings","settings","changeDifficulty","goodOption","correctN","incorrectN","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.09a1625d.chunk.js","sourcesContent":["// module contating app  global settings to prevent hardcode method\r\n\r\n// difficulty enum\r\nconst difficulty = {\r\n    EASY: 'easy',\r\n    MEDIUM: 'mid',\r\n    HARD: 'hard'\r\n};\r\n\r\n// concatenated dog array from breeds.json\r\nconst breeds = ['affenpinscher', 'african', 'airedale', 'akita', 'appenzeller', 'australian-shepherd', 'basenji', 'beagle', 'bluetick', 'borzoi', 'bouvier', 'boxer', 'brabancon', 'briard', 'buhund-norwegian', 'bulldog-boston', 'bulldog-english', 'bulldog-french', 'bullterrier-staffordshire', 'cairn', 'cattledog-australian', 'chihuahua', 'chow', 'clumber', 'cockapoo', 'collie-border', 'coonhound', 'corgi-cardigan', 'cotondetulear', 'dachshund', 'dalmatian', 'dane-great', 'deerhound-scottish', 'dhole', 'dingo', 'doberman', 'elkhound-norwegian', 'entlebucher', 'eskimo', 'finnish-lapphund', 'frise-bichon', 'germanshepherd', 'greyhound-italian', 'groenendael', 'havanese', 'hound-afghan', 'hound-basset', 'hound-blood', 'hound-english', 'hound-ibizan', 'hound-plott', 'hound-walker', 'husky', 'keeshond', 'kelpie', 'komondor', 'kuvasz', 'labrador', 'leonberg', 'lhasa', 'malamute', 'malinois', 'maltese', 'mastiff-bull', 'mastiff-english', 'mastiff-tibetan', 'mexicanhairless', 'mix', 'mountain-bernese', 'mountain-swiss', 'newfoundland', 'otterhound', 'ovcharka-caucasian', 'papillon', 'pekinese', 'pembroke', 'pinscher-miniature', 'pitbull', 'pointer-german', 'pointer-germanlonghair', 'pomeranian', 'poodle-miniature', 'poodle-standard', 'poodle-toy', 'pug', 'puggle', 'pyrenees', 'redbone', 'retriever-chesapeake', 'retriever-curly', 'retriever-flatcoated', 'retriever-golden', 'ridgeback-rhodesian', 'rottweiler', 'saluki', 'samoyed', 'schipperke', 'schnauzer-giant', 'schnauzer-miniature', 'setter-english', 'setter-gordon', 'setter-irish', 'sheepdog-english', 'sheepdog-shetland', 'shiba', 'shihtzu', 'spaniel-blenheim', 'spaniel-brittany', 'spaniel-cocker', 'spaniel-irish', 'spaniel-japanese', 'spaniel-sussex', 'spaniel-welsh', 'springer-english', 'stbernard', 'terrier-american', 'terrier-australian', 'terrier-bedlington', 'terrier-border', 'terrier-dandie', 'terrier-fox', 'terrier-irish', 'terrier-kerryblue', 'terrier-lakeland', 'terrier-norfolk', 'terrier-norwich', 'terrier-patterdale', 'terrier-russell', 'terrier-scottish', 'terrier-sealyham', 'terrier-silky', 'terrier-tibetan', 'terrier-toy', 'terrier-westhighland', 'terrier-wheaten', 'terrier-yorkshire', 'vizsla', 'waterdog-spanish', 'weimaraner', 'whippet', 'wolfhound-irish'];\r\n\r\n// opotions number for given difficulty\r\nconst difficultyNumber = {\r\n    easy: 2,\r\n    mid: 4,\r\n    hard: 5,\r\n}\r\n// number of answers to choose\r\nconst answerNoptions = {\r\n    easy: 10,\r\n    mid: 20,\r\n    hard: 30,\r\n}\r\n// api url for fetching dogs\r\nconst randomImageUrl = 'https://dog.ceo/api/breeds/image/random';\r\n\r\n// main color of unique components\r\nconst mainColor = '#4287f5';\r\n\r\nexport { difficulty, breeds, difficultyNumber, randomImageUrl, answerNoptions, mainColor }","import React from 'react';\r\nimport './App.css';\r\nimport { difficulty, answerNoptions } from './Globals';\r\n\r\n// render starting difficulty to choose\r\nfunction StartingDifficulty(props) {\r\n  return (\r\n    <>\r\n      <div className=\"row center-align\">\r\n        <div className='col s12'>\r\n          <p className='setting-hint'>Choose difficulty</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"row center-align\">\r\n        <div className='col s4'>\r\n          <a className=\"waves-effect waves-light btn\" onClick={() => props.setter(difficulty.EASY)}>{difficulty.EASY}</a>\r\n        </div>\r\n        <div className='col s4'>\r\n          <a className=\"waves-effect waves-light btn\" onClick={() => props.setter(difficulty.MEDIUM)}>{difficulty.MEDIUM}</a>\r\n        </div>\r\n        <div className='col s4'>\r\n          <a className=\"waves-effect waves-light btn\" onClick={() => props.setter(difficulty.HARD)}>{difficulty.HARD}</a>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// render starting question number to choose\r\nfunction StartingQuestionN(props) {\r\n  return (\r\n    <>\r\n      <div className=\"row center-align\">\r\n        <div className='s12'>\r\n          <p className='setting-hint'>Choose number of questions</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"row center-align\">\r\n        <div className='col s4'>\r\n          <a className=\"waves-effect waves-light btn\" onClick={() => props.setter(answerNoptions.easy)}>{answerNoptions.easy}</a>\r\n        </div>\r\n        <div className='col s4'>\r\n          <a className=\"waves-effect waves-light btn\" onClick={() => props.setter(answerNoptions.mid)}>{answerNoptions.mid}</a>\r\n        </div>\r\n        <div className='col s4'>\r\n          <a className=\"waves-effect waves-light btn\" onClick={() => props.setter(answerNoptions.hard)}>{answerNoptions.hard}</a>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// starting components containing actual settings\r\nclass StartingSettings extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      difficulty: null\r\n    }\r\n  }\r\n  setDifficulty = (setting) => {\r\n    this.setState({ difficulty: setting });\r\n  }\r\n  setQuestionN = (setting) => {\r\n    this.props.PushSettings({\r\n      difficulty: this.state.difficulty,\r\n      questionNumber: setting\r\n    });\r\n  }\r\n  render() {\r\n    if (!this.state.difficulty) {\r\n      return <StartingDifficulty setter={this.setDifficulty} />;\r\n    }\r\n    else {\r\n      return <StartingQuestionN setter={this.setQuestionN} />;\r\n    }\r\n  }\r\n}\r\nexport { StartingSettings };","\r\nimport React from 'react';\r\n\r\n// player info at the bottom\r\nfunction GameInfo(props) {\r\n    return (\r\n        <footer class=\"page-footer sticky-footer blue\">\r\n            <div class=\"footer-copyright\">\r\n                <div class=\"container\">\r\n                    <span className='left'>© 2020 Szymon Idziniak</span>\r\n                    <span className='right'>{'Difficulty:  ' + props.difficulty + '  -  Answered:  ' + props.questionN.answered + ' / ' + props.questionN.all}</span>\r\n                </div>\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n\r\n// padding for header text\r\nfunction TopPadding(props) {\r\n    return (\r\n        <>\r\n            <div className='row'>\r\n                <div className=\"top-padding s12\">\r\n                    <p className='header-text wobble-hor-bottom'>{props.message}</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n// menu entry for floating button with dynamic difficulty\r\nfunction MenuEntry(props) {\r\n    return (\r\n        <li key={props.color}><a className={\"btn-floating \" + props.color} onClick={props.changeHandler}>{props.difficulty}</a></li>\r\n    )\r\n}\r\n// materialize row-column wrapper\r\nfunction ColumnWrapper(props) {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className={props.columnClasses}>\r\n                {props.content}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n// screen rendered after finished game\r\nfunction Finished(props) {\r\n    return (\r\n        <>\r\n            <TopPadding />\r\n            <div className=\"row center-align\">\r\n                <div className='s12'>\r\n                    <p className='setting-hint'>{\"Your score: \" + props.score}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row center-align\">\r\n                <div className='col s12'>\r\n                    <a className=\"waves-effect waves-light btn\" onClick={() => props.resetGame()}>Play again</a>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport { GameInfo, TopPadding, MenuEntry, ColumnWrapper, Finished }","import React from 'react';\nimport { difficulty, breeds, difficultyNumber, randomImageUrl, mainColor } from './Globals';\nimport { StartingSettings } from './Starter';\nimport { GameInfo, TopPadding, MenuEntry, ColumnWrapper, Finished } from './FunComponents'\nimport './animations.css';\nimport { DualRing } from 'react-spinners-css';\nimport $ from 'jquery';\nimport M from 'materialize-css';\n\n// handle list selection\nclass ButtonsMenu extends React.Component {\n  //init materialize js for dropdown\n  componentDidMount() {\n    M.Dropdown.init($('.dropdown-trigger'), {\n      container: $('#drop-options'),\n      autoTrigger: true,\n    });\n  }\n  render() {\n    let listItems = [];\n    let dogs = this.props.breeds;\n    for (let i = 0; i < dogs.length; i++) {\n      listItems[i] = <li key={dogs[i]}><a onClick={() => this.props.handler(i)}>{dogs[i]}</a></li>;\n    }\n    // return list with mapped options\n    return (\n      <div id='drop-options'>\n        <a class='dropdown-trigger btn' href='#' data-target='dropdown1'>Choose</a>\n        <ul id='dropdown1' className='dropdown-content '>\n          {listItems}\n        </ul>\n      </div>\n    );\n  }\n}\n\n// component for fetching data and generating options\nclass ImageApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      url: null,\n      prev_diff: null,\n      correct_id: null,\n      generatedBreeds: null,\n      questionN: 0,\n    };\n  }\n  // get photo from api\n  fetch_photo = () => {\n    fetch(randomImageUrl)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          // handle respose error\n          let url = String(result.message);\n          if (result.status !== 'success') {\n            this.setState({\n              error: { message: result.status }\n            });\n          }\n          else if (url.substr(url.length - 3, url.length) === 'txt') {\n            this.setState({\n              error: { message: 'file corrupted' }\n            });\n          }\n          // set state for actual dog\n          let generatedBreeds = this.generateBreeds(url);\n          let correct_id = this.getCorrectId(generatedBreeds, this.getNameFromUrl(url));\n          this.setState({\n            isLoaded: true,\n            url: url,\n            status: result.status,\n            correct_id: correct_id,\n            generatedBreeds: generatedBreeds,\n          });\n        },\n        // handle fetch error\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error,\n          });\n        }\n      )\n  }\n\n  // fetch phono after component is mounted\n  componentDidMount() {\n    this.fetch_photo();\n  }\n\n  componentDidUpdate() {\n    // if error encountered -> flush error and force update fetch\n    if (this.state.error) {\n      this.setState({\n        error: null\n      });\n    }\n    //if difficulty has changed -> get new photo and update old setting\n    if (this.props.difficulty !== this.state.prev_diff) {\n      this.fetch_photo();\n      this.setState({ prev_diff: this.props.difficulty })\n    }\n  }\n\n  // shuffle array using Math.random\n  shuffle = (arr) => {\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i)\n      const temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n    }\n    return arr;\n  }\n  // get dog name from api url\n  getNameFromUrl = (url) => {\n    const splitted = url.split('/');\n    const n = splitted.length;\n    return splitted[n - 2];\n  }\n  // generate options to choose\n  generateBreeds = (url) => {\n    const breedName = this.getNameFromUrl(url);\n    const diff = this.props.difficulty;\n    let breedCopy = [...breeds];\n    breedCopy.splice(breedCopy.indexOf(breedName), 1);\n    let generatedBreeds = [breedName];\n    for (let i = 0; i < difficultyNumber[diff] - 1; i++) {\n      let j = Math.floor(Math.random() * breedCopy.length);\n      generatedBreeds.push(breedCopy[j]);\n      breedCopy.splice(j, 1);\n    }\n    return this.shuffle(generatedBreeds);\n  }\n  // get correct id from shuffled list\n  getCorrectId = (dogs, correct) => {\n    return dogs.indexOf(correct);\n  }\n  // callback to paren App for option handler\n  answerWrapper = (choosen_id) => {\n    if (choosen_id === this.state.correct_id) {\n      this.props.handleAnswer(true);\n    }\n    else {\n      this.props.handleAnswer(false);\n    }\n    this.fetch_photo();\n  }\n\n  // render image with options to choose\n  render() {\n    const { error, isLoaded, url } = this.state;\n    // handle error encountered after fetch from api\n    if (error) {\n      return (\n        <ColumnWrapper content={<p>{error.message}</p>} columnClasses='image-container col s12 m10 offset-m1 l8 offset-l2' />\n      );\n    // return loading icon if image not loaded\n    } else if (!isLoaded) {\n      return (\n        <ColumnWrapper content={<DualRing\n          className='custom-spinner'\n          color={mainColor}\n          size={80}\n        />} columnClasses='image-container col s12 m10 offset-m1 l8 offset-l2' />\n      );\n    }\n    // display image with options\n    else {\n      const content = <img className='dog-image valign-wrapper scale-up-center z-depth-5' src={url} alt=\"\" key={url} />\n      return (\n        <>\n          <ColumnWrapper content={content} columnClasses='image-container col s12 m8 offset-m2 l6 offset-l3 xl4 offset-xl4' />\n          <ColumnWrapper content={<ButtonsMenu breeds={this.state.generatedBreeds} handler={this.answerWrapper} />}\n            columnClasses='col s12 m10 offset-m1 l8 offset-l2 center-align' />\n        </>\n      );\n    }\n  }\n}\n\n// component for dynamic difficulty selection\nclass DifficultyMenu extends React.Component {\n  // init materialize css floating button\n  componentDidMount() {\n    M.FloatingActionButton.init($('#diff_button'));\n  }\n  // render button with options\n  render() {\n    return (\n      <div className=\"fixed-action-btn difficulty_menu\" id='diff_button'>\n        <a className=\"btn-floating btn-large red\">\n          <i className=\"large material-icons\">arrow_drop_up</i>\n        </a>\n        <ul>\n          <MenuEntry color='green' difficulty={difficulty.EASY} changeHandler={() => this.props.changeHandler(difficulty.EASY)} />\n          <MenuEntry color='yellow darken-3' difficulty={difficulty.MEDIUM} changeHandler={() => this.props.changeHandler(difficulty.MEDIUM)} />\n          <MenuEntry color='red' difficulty={difficulty.HARD} changeHandler={() => this.props.changeHandler(difficulty.HARD)} />\n        </ul>\n      </div>\n    );\n  }\n}\n\n// main component for app\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      settingsApplied: false,\n      difficulty: null,\n      questionNumber: null,\n      playerAnswers: {\n        correct: 0,\n        incorrect: 0,\n        all: 0\n      },\n    }\n  }\n  // resert game along with all states\n  resetGame = () => {\n    this.setState({\n      settingsApplied: false,\n      difficulty: null,\n      questionNumber: null,\n      playerAnswers: {\n        correct: 0,\n        incorrect: 0,\n        all: 0\n      }\n    });\n  }\n  // apply settings for app\n  starterSettings = (settings) => {\n    this.setState({\n      settingsApplied: true,\n      difficulty: settings.difficulty,\n      questionNumber: settings.questionNumber,\n    });\n  }\n  // handle dynamic difficulty change\n  changeDifficulty = (diff) => {\n    if (diff !== this.state.difficulty) {\n      this.setState({ difficulty: diff });\n    }\n  }\n  // handle chosen option\n  handleAnswer = (goodOption) => {\n    let correctN = this.state.playerAnswers.correct;\n    let incorrectN = this.state.playerAnswers.incorrect;\n    if (goodOption) {\n      correctN += 1;\n    }\n    else {\n      incorrectN += 1;\n    }\n    this.setState({\n      playerAnswers: {\n        correct: correctN,\n        incorrect: incorrectN,\n        all: correctN + incorrectN,\n      },\n    });\n  }\n  // render whole app\n  render() {\n    // render main app loop\n    if (this.state.settingsApplied) {\n      if (this.state.questionNumber !== this.state.playerAnswers.all) {\n        return (\n          <div className=\"container\">\n            <TopPadding message=\"What's it?\" />\n            <ImageApp difficulty={this.state.difficulty} handleAnswer={this.handleAnswer} questionN={this.state.playerAnswers.all} />\n            <DifficultyMenu changeHandler={this.changeDifficulty} />\n            <GameInfo difficulty={this.state.difficulty} questionN={{\n              answered: this.state.playerAnswers.all,\n              all: this.state.questionNumber,\n            }} />\n          </div>\n        );\n      }\n      // render finish window if game is finished\n      else {\n        return (\n          <div className=\"container finished\">\n            <Finished score={this.state.playerAnswers.correct + '/' + this.state.playerAnswers.all} resetGame={this.resetGame} />\n          </div>\n        );\n      }\n    }\n    // render starting page at start\n    else {\n      return (\n        <div className=\"container\">\n          <TopPadding message='' className='bar-top' />\n          <StartingSettings PushSettings={this.starterSettings} />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}